name: 🚀 EmiteAí CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/emiteai-frontend
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/emiteai-backend

jobs:
  # ===============================================
  # FRONTEND TESTS & BUILD
  # ===============================================
  frontend-tests:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: 📋 Install dependencies
      run: npm ci

    - name: 🔍 Run ESLint
      run: npm run lint

    - name: 🧪 Run tests with coverage
      run: npm run test:coverage

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: 🏗️ Build frontend
      run: npm run build

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: ./frontend/build/

  # ===============================================
  # BACKEND TESTS & BUILD
  # ===============================================
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: emiteai_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: 🧪 Run tests
      run: ./gradlew test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/emiteai_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_pass

    - name: 📊 Generate test coverage report
      run: ./gradlew jacocoTestReport

    - name: 📤 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/build/reports/jacoco/test/jacocoTestReport.xml
        flags: backend
        name: backend-coverage

    - name: 🏗️ Build JAR
      run: ./gradlew build -x test

    - name: 📤 Upload JAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-jar
        path: ./backend/build/libs/*.jar

  # ===============================================
  # SECURITY SCAN
  # ===============================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # ===============================================
  # DOCKER BUILD & PUSH
  # ===============================================
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 📥 Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: ./frontend/build/

    - name: 📥 Download backend JAR
      uses: actions/download-artifact@v3
      with:
        name: backend-jar
        path: ./backend/build/libs/

    - name: 🐳 Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🐳 Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.BACKEND_IMAGE }}:latest
          ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===============================================
  # INTEGRATION TESTS
  # ===============================================
  integration-tests:
    name: 🔄 Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Start services with Docker Compose
      run: |
        export FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        export BACKEND_IMAGE=${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        docker-compose -f docker-compose.ci.yml up -d

    - name: ⏳ Wait for services
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8080/actuator/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

    - name: 🧪 Run integration tests
      run: |
        # Execute integration test suite here
        curl -f http://localhost:8080/api/pessoas
        curl -f http://localhost:3000

    - name: 🧹 Cleanup
      if: always()
      run: docker-compose -f docker-compose.ci.yml down -v

  # ===============================================
  # DEPLOYMENT (Staging)
  # ===============================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: 🚀 Deploy to staging environment
      run: |
        echo "🎯 Deploying to staging..."
        echo "Frontend: ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}"
        echo "Backend: ${{ env.BACKEND_IMAGE }}:${{ github.sha }}"
        # Add your deployment script here

    - name: ✅ Staging health check
      run: |
        echo "🏥 Checking staging health..."
        # Add health check commands here

  # ===============================================
  # RELEASE NOTES
  # ===============================================
  release-notes:
    name: 📝 Generate Release Notes
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📋 Generate release notes
      uses: release-drafter/release-drafter@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
