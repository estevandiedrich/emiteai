plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'jacoco'
}

group = 'com.emiteai'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    
    // Hibernate Envers for entity auditing
    implementation 'org.hibernate:hibernate-envers:6.2.7.Final'
    
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql:9.22.0'
    
    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'com.h2database:h2'
}


tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/Application.class',
                '**/config/**',
                '**/dtos/**',
                '**/entities/**',
                '**/*Config.class',
                '**/*Application.class',
                '**/*Exception.class',
                '**/*Configuration.class',
                '**/filter/**',
                '**/interceptor/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.70
            }
        }
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/Application.class',
                '**/config/**',
                '**/dtos/**',
                '**/entities/**',
                '**/*Config.class',
                '**/*Application.class',
                '**/*Exception.class',
                '**/*Configuration.class',
                '**/filter/**',
                '**/interceptor/**'
            ])
        }))
    }
}

jacoco {
    toolVersion = "0.8.11"
}

// Task para executar testes e gerar relat贸rio de coverage
task testCoverage {
    dependsOn test
    dependsOn jacocoTestReport
    description = 'Executa testes e gera relat贸rio de coverage'
    group = 'verification'
}

// Task para abrir o relat贸rio HTML
task openCoverageReport {
    dependsOn jacocoTestReport
    description = 'Abre o relat贸rio de coverage no navegador'
    group = 'verification'
    doLast {
        def reportFile = file("${buildDir}/reports/jacoco/test/html/index.html")
        if (reportFile.exists()) {
            if (System.getProperty('os.name').toLowerCase().contains('linux')) {
                exec {
                    commandLine 'xdg-open', reportFile.absolutePath
                }
            } else if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                exec {
  